{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/aman/i-pam/social-networking-app/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { USER_LOGIN_REQUEST, \n         USER_LOGIN_SUCCESS, \n         USER_LOGIN_FAIL , \n         USER_LOGOUT, \n         USER_REGISTER_REQUEST, \n         USER_REGISTER_SUCCESS, \n         USER_REGISTER_FAIL, \n         USER_DETAILS_REQUEST, \n         USER_DETAILS_SUCCESS, \n         USER_DETAILS_FAIL, \n         USER_UPDATE_PROFILE_FAIL,\n         USER_UPDATE_PROFILE_REQUEST,\n         USER_UPDATE_PROFILE_SUCCESS} from \"../constants/userConstants\";\n\nexport const login = (email, password) => async (dispatch)=> {\n   try {\n       dispatch({\n           type: USER_LOGIN_REQUEST,\n       })\n       const config ={\n           headers:{\n               'Content-Type':'application/json',\n           },\n       }\n       const {data} = await axios.post(\n           '/api/users/login', {email, password}, config\n       )\n       dispatch({\n           type: USER_LOGIN_SUCCESS,\n           payload: data,\n       })\n\n       localStorage.setItem('userInfo', JSON.stringify(data))\n   } catch (error) {\n    dispatch({\n        type:USER_LOGIN_FAIL,\n        payload: error.response && error.response.data.message \n        ? error.response.data.message : error.message,\n    })\n   }\n}\n\nexport const logout = () => (dispatch) =>{\n    localStorage.removeItem('userInfo')\n    dispatch({type: USER_LOGOUT})\n}\n\nexport const register = (name, email, password) => async (dispatch)=> {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        })\n        const config ={\n            headers:{\n                'Content-Type':'application/json',\n            },\n        }\n        const {data} = await axios.post(\n            '/api/users', {name, email, password}, config\n        )\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data,\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        })\n \n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n     dispatch({\n         type:USER_REGISTER_FAIL,\n         payload: error.response && error.response.data.message \n         ? error.response.data.message : error.message,\n     })\n    }\n }\n \n export const getUserDetails = (id) => async (dispatch, getState)=> {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST,\n        })\n        const {userLogin:{userInfo}}= getState()\n        const config ={\n            headers:{\n                'Content-Type':'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            },\n        }\n        const {data} = await axios.get(\n            `/api/users/${id}`, config\n        )\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data,\n        })\n\n    } catch (error) {\n     dispatch({\n         type:USER_DETAILS_FAIL,\n         payload: error.response && error.response.data.message \n         ? error.response.data.message : error.message,\n     })\n    }\n }\n \n\n\n export const updateUserProfile = (user) => async (dispatch, getState)=> {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST,\n        })\n        const {userLogin:{userInfo}}= getState()\n        const config ={\n            headers:{\n                'Content-Type':'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            },\n        }\n        const {data} = await axios.put(\n            `/api/users/profile`, user, config\n        )\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data,\n        })\n\n    } catch (error) {\n     dispatch({\n         type:USER_UPDATE_PROFILE_FAIL,\n         payload: error.response && error.response.data.message \n         ? error.response.data.message : error.message,\n     })\n    }\n }\n "]},"metadata":{},"sourceType":"module"}